// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// tour agency
model Company {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  branch    Branch[]
}

model Branch {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  company   Company?  @relation(fields: [companyId], references: [id])
  companyId String
  user      User[]
  order     Order[]
  invoice   Invoice[]
  payment   Payment[]
}

model User {
  id             String    @id @default(uuid())
  photo          String?
  fullName       String
  password       String
  phones         String[]  @default([])
  mainPhone      String    @unique
  passportSeries String    @unique
  branch         Branch?   @relation(fields: [branchId], references: [id])
  branchId       String
  createdAt      DateTime  @default(now())
  status         Boolean   @default(true)
  role           String?
  superAdmin     Boolean   @default(false)
  order          Order[]
  invoice        Invoice[]
  payment        Payment[]
  client         Client[]
}

model Client {
  id             String    @id @default(uuid())
  fullName       String
  phone          String[]  @default([])
  passportSeries String    @unique
  createdAt      DateTime  @default(now())
  user           User?     @relation(fields: [userId], references: [id])
  userId         String
  order          Order[]
  invoice        Invoice[]
  ticket         Ticket[]
  visa           Visa[]
}

model Order {
  id          String       @id @default(uuid())
  orderNumber BigInt       @default(autoincrement())
  type        String // tour, ticket, visa
  createdAt   DateTime     @default(now())
  client      Client?      @relation(fields: [clientId], references: [id])
  clientId    String
  user        User?        @relation(fields: [userId], references: [id])
  userId      String
  branch      Branch?      @relation(fields: [branchId], references: [id])
  branchId    String
  b2bPrice    Int
  b2cPrice    Int
  files       String[]     @default([])
  orderTour   OrderTour?
  orderTicket OrderTicket?
  orderVisa   OrderVisa?
  invoice     Invoice?
}

model OrderTour {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  order           Order?   @relation(fields: [orderId], references: [id])
  orderId         String   @unique
  ticketId        String
  tourId          String
  tourDestination String
  flightDate      DateTime
  ticket          Ticket[]
}

model OrderTicket {
  id                String   @id @default(uuid())
  createdAt         DateTime @default(now())
  order             Order?   @relation(fields: [orderId], references: [id])
  orderId           String   @unique
  ticketId          String
  ticketDestination String
  flightDate        DateTime
  ticket            Ticket[]
}

model OrderVisa {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  order       Order?   @relation(fields: [orderId], references: [id])
  orderId     String   @unique
  visaId      String
  tourId      String
  countPeople Int
  visa        Visa[]
}

model Ticket {
  id            String       @id @default(uuid())
  createdAt     DateTime     @default(now())
  orderTour     OrderTour?   @relation(fields: [orderTourId], references: [id])
  orderTourId   String?
  ticketId      String       @unique
  client        Client?      @relation(fields: [clientId], references: [id])
  clientId      String
  orderTicket   OrderTicket? @relation(fields: [orderTicketId], references: [id])
  orderTicketId String?
}

model Visa {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  visaId      String     @unique
  client      Client?    @relation(fields: [clientId], references: [id])
  clientId    String
  orderVisa   OrderVisa? @relation(fields: [orderVisaId], references: [id])
  orderVisaId String
}

model Invoice {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  order         Order?    @relation(fields: [orderId], references: [id])
  orderId       String    @unique
  client        Client?   @relation(fields: [clientId], references: [id])
  clientId      String
  invoiceAmount Int
  // status        String // pending, paid, canceled
  payment       Payment[]
  branch        Branch?   @relation(fields: [branchId], references: [id])
  branchId      String
  user          User?     @relation(fields: [userId], references: [id])
  userId        String
}

model Payment {
  id            String   @id @default(uuid())
  type          String // cash, card, transfer
  rawAmount     Int // amount from client
  rawCurrency   String // currency from client
  status        String // pending, paid, canceled
  createdAt     DateTime @default(now())
  invoice       Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId     String   @unique
  paymentAmount Int // only dollar
  branch        Branch?  @relation(fields: [branchId], references: [id])
  branchId      String
  user          User?    @relation(fields: [userId], references: [id])
  userId        String
}

model Currency {
  id        String   @id @default(uuid())
  currency  String
  createdAt DateTime @default(now())
  date      String   @unique
  value     Int
}

model Partner {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  name      String   @unique
  link      String
  data      Json     @default("{}")
}

// model Post {
// id             String       @id @default(uuid())
//   title     String
//   content   String?
//   published Boolean? @default(false)
//   author    User?    @relation(fields: [authorId], references: [id])
//   authorId  Int?
// }
